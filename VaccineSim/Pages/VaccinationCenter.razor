@page "/"
@using VaccineSim.Utils

<h3>VaccinationCenter</h3>
<p>Simulation time: @TimeFormatter.SecondsToTime(8, _afterEventValues.SimulationTime)</p>
<p>Replication @_afterReplicationValues.Replication</p>

@* Basic statistics *@
<div class="card-group">
    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Registration</h5>
        </div>
        <ul class="list-group list-group-flush">
            <li class="list-group-item d-flex justify-content-between align-items-center">Front length: <span>@_afterEventValues.RegistrationFrontLength</span></li>
            <li class="list-group-item d-flex justify-content-between align-items-center">Average length: <span>@_afterEventValues.RegistrationAverageLength.ToString("0.####")</span></li>
            <li class="list-group-item d-flex justify-content-between align-items-center">Average waiting: <span>@TimeFormatter.SecondsToTime(_afterEventValues.RegistrationAverageTime)</span></li>
        </ul>
    </div>

    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Examination</h5>
        </div>
        <ul class="list-group list-group-flush">
            <li class="list-group-item d-flex justify-content-between align-items-center">Front length: <span>@_afterEventValues.ExaminationFrontLength</span></li>
            <li class="list-group-item d-flex justify-content-between align-items-center">Average length: <span>@_afterEventValues.ExaminationAverageLength.ToString("0.####")</span></li>
            <li class="list-group-item d-flex justify-content-between align-items-center">Average waiting: <span>@TimeFormatter.SecondsToTime(_afterEventValues.ExaminationAverageTime)</span></li>
        </ul>
    </div>

    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Vaccination</h5>
        </div>
        <ul class="list-group list-group-flush">
            <li class="list-group-item d-flex justify-content-between align-items-center">Front length: <span>@_afterEventValues.VaccinationFrontLength</span></li>
            <li class="list-group-item d-flex justify-content-between align-items-center">Average length: <span>@_afterEventValues.VaccinationAverageLength.ToString("0.####")</span></li>
            <li class="list-group-item d-flex justify-content-between align-items-center">Average waiting: <span>@TimeFormatter.SecondsToTime(_afterEventValues.VaccinationAverageTime)</span></li>
        </ul>
    </div>

    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Waiting</h5>
        </div>
        <ul class="list-group list-group-flush">
            <li class="list-group-item d-flex justify-content-between align-items-center">In room: <span>@_afterEventValues.WaitingRoomPatients</span></li>
            <li class="list-group-item d-flex justify-content-between align-items-center">Average: <span>@_afterEventValues.WaitingRoomAverageLength.ToString("0.####")</span></li>
        </ul>
    </div>
</div>
@* Workers statistics *@
<div class="card-group">
    <div class="card">
        <div class="card-body">
            <h6 class="card-title">Registration Workers</h6>
        </div>
        @if (_afterEventValues.RegistrationWorkersStats != null)
        {
            <ul class="list-group list-group-flush">
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <span>Id</span>
                    <span>Status</span>
                    <span>Workload</span>
                </li>
                @foreach (var worker in _afterEventValues.RegistrationWorkersStats)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <span>@worker.Id</span>
                        @if (worker.IsWorking)
                        {
                            <i class="fas fa-circle"></i>
                        }
                        else
                        {
                            <i class="far fa-circle"></i>
                        }
                        <span>@worker.Workload.ToString("0.000")</span>
                    </li>
                }
            </ul>
        }
    </div>

    <div class="card">
        <div class="card-body">
            <h6 class="card-title">Examination Workers</h6>
        </div>
        @if (_afterEventValues.ExaminationWorkersStats != null)
        {
            <ul class="list-group list-group-flush">
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <span>Id</span>
                    <span>Status</span>
                    <span>Workload</span>
                </li>
                @foreach (var worker in _afterEventValues.ExaminationWorkersStats)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <span>@worker.Id</span>
                        @if (worker.IsWorking)
                        {
                            <i class="fas fa-circle"></i>
                        }
                        else
                        {
                            <i class="far fa-circle"></i>
                        }
                        <span>@worker.Workload.ToString("0.000")</span>
                    </li>
                }
            </ul>
        }
    </div>

    <div class="card">
        <div class="card-body">
            <h6 class="card-title">Vaccination Workers</h6>
        </div>
        @if (_afterEventValues.VaccinationWorkersStats != null)
        {
            <ul class="list-group list-group-flush">
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <span>Id</span>
                    <span>Status</span>
                    <span>Workload</span>
                </li>
                @foreach (var worker in _afterEventValues.VaccinationWorkersStats)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <span>@worker.Id</span>
                        @if (worker.IsWorking)
                        {
                            <i class="fas fa-circle"></i>
                        }
                        else
                        {
                            <i class="far fa-circle"></i>
                        }
                        <span>@worker.Workload.ToString("0.000")</span>
                    </li>
                }
            </ul>
        }
    </div>
</div>
@* Buttons *@

<div>
    <label for="isWatching">Watching: </label>
    <input id="isWatching" type="checkbox" @bind-value="_simulationService.ESSettings.IsWatching"/>
    <input type="range" min="1" max="100" @bind-value="_simulationService.ESSettings.SpeedModification"/>
</div>

<div class="btn-group" role="group">
    <button class="btn btn-primary" @onclick="@StartSimulation">Start</button>
    @if (_simulationService.ESSettings.IsPause)
    {
        <button class="btn btn-success" @onclick="@PauseSimulation">Resume</button>
    }
    else
    {
        <button class="btn btn-warning" @onclick="@PauseSimulation">Pause</button>
    }
    <button class="btn btn-danger" @onclick="@StopSimulation" disabled="@(_simulationService.MCSettings.CancellationToken)">Stop</button>
</div>

